package org.coursera.capstone.symptom;

import javax.servlet.MultipartConfigElement;

import org.coursera.capstone.symptom.auth.OAuth2SecurityConfiguration;
import org.coursera.capstone.symptom.json.ResourcesMapper;
import org.coursera.capstone.symptom.push.Content;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.context.embedded.MultiPartConfigFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import com.fasterxml.jackson.databind.ObjectMapper;

//Tell Spring to automatically inject any dependencies that are marked in
//our classes with @Autowired
@EnableAutoConfiguration
// Tell Spring to turn on WebMVC (e.g., it should enable the DispatcherServlet
// so that requests can be routed to our Controllers)
@EnableWebMvc
@EnableJpaRepositories(basePackages = {"org.coursera.capstone.symptom.repository"})
// Tell Spring that this object represents a Configuration for the
// application
@Configuration
@Import(OAuth2SecurityConfiguration.class)
// Tell Spring to go and scan our controller package (and all sub packages) to
// find any Controllers or other components that are part of our application.
// Any class in this package that is annotated with @Controller is going to be
// automatically discovered and connected to the DispatcherServlet.
@ComponentScan
public class Application extends RepositoryRestMvcConfiguration {

	// The app now requires that you pass the location of the keystore and
	// the password for your private key that you would like to setup HTTPS
	// with. In Eclipse, you can set these options by going to:
	// 1. Run->Run Configurations
	// 2. Under Java Applications, select your run configuration for this app
	// 3. Open the Arguments tab
	// 4. In VM Arguments, provide the following information to use the
	// default keystore provided with the sample code:
	//
	// -Dkeystore.file=src/main/resources/private/keystore
	// -Dkeystore.pass=changeit
	//
	// 5. Note, this keystore is highly insecure! If you want more securtiy, you
	// should obtain a real SSL certificate:
	//
	// http://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html
	//
	// Tell Spring to launch our app!

	public static void main(String[] args) {

		SpringApplication.run(Application.class, args);
	}

	public static Content createContent(String regId, String title,
			String message) {

		Content c = new Content();

		c.addRegId(regId);
		c.createData(title, message);

		return c;
	}
	
	@Override
	public ObjectMapper halObjectMapper(){
		return new ResourcesMapper();
		
	}
	
	@Bean
	public MultipartConfigElement multipartConfig(){
		MultiPartConfigFactory f = new MultiPartConfigFactory();
		f.setMaxFileSize("128KB");
		f.setMaxRequestSize("128KB");
		return f.createMultipartConfig();
	}
	
}
