package org.coursera.symptommanager;

import java.util.ArrayList;

import org.coursera.symptommanager.objects.Account;
import org.coursera.symptommanager.objects.CheckIn;
import org.coursera.symptommanager.objects.DoctorDetail;
import org.coursera.symptommanager.objects.Medication;
import org.coursera.symptommanager.objects.PatientDetail;
import org.coursera.symptommanager.objects.Question;

import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.POST;
import retrofit.http.Path;
import retrofit.http.Query;

/**
 * DO NOT MODIFY THIS INTERFACE ___ ___ ___ _____ /\ \ /\ \ /\ \ /::\ \ /::\ \
 * \:\ \ /::\ \ ___ /:/\:\ \ /:/\:\ \ \:\ \ /:/\:\ \ /\__\ /:/ \:\__\ /:/ \:\ \
 * _____\:\ \ /:/ \:\ \ /:/ / /:/__/ \:|__| /:/__/ \:\__\ /::::::::\__\ /:/__/
 * \:\__\ /:/__/ \:\ \ /:/ / \:\ \ /:/ / \:\~~\~~\/__/ \:\ \ /:/ / /::\ \ \:\
 * /:/ / \:\ /:/ / \:\ \ \:\ /:/ / /:/\:\ \ \:\/:/ / \:\/:/ / \:\ \ \:\/:/ /
 * \/__\:\ \ \::/ / \::/ / \:\__\ \::/ / \:\__\ \/__/ \/__/ \/__/ \/__/ \/__/
 * ___ ___ ___ /\ \ /\ \ _____ /\__\ |::\ \ /::\ \ /::\ \ ___ /:/ _/_ ___ |:|:\
 * \ /:/\:\ \ /:/\:\ \ /\__\ /:/ /\__\ /| | __|:|\:\ \ /:/ \:\ \ /:/ \:\__\
 * /:/__/ /:/ /:/ / |:| | /::::|_\:\__\ /:/__/ \:\__\ /:/__/ \:|__| /::\ \
 * /:/_/:/ / |:| | \:\~~\ \/__/ \:\ \ /:/ / \:\ \ /:/ / \/\:\ \__ \:\/:/ /
 * __|:|__| \:\ \ \:\ /:/ / \:\ /:/ / ~~\:\/\__\ \::/__/ /::::\ \ \:\ \ \:\/:/ /
 * \:\/:/ / \::/ / \:\ \ ~~~~\:\ \ \:\__\ \::/ / \::/ / /:/ / \:\__\ \:\__\
 * \/__/ \/__/ \/__/ \/__/ \/__/ \/__/
 * 
 * 
 * /** This interface defines an API for a VideoSvc. The interface is used to
 * provide a contract for client/server interactions. The interface is annotated
 * with Retrofit annotations so that clients can automatically convert the
 * interface into a client capable of sending the appropriate HTTP requests.
 * 
 * The HTTP API that you must implement so that this interface will work:
 * 
 * POST /oauth/token - The access point for the OAuth 2.0 Password Grant flow. -
 * Clients should be able to submit a request with their username, password,
 * client ID, and client secret, encoded as described in the OAuth lecture
 * videos. - The client ID for the Retrofit adapter is "mobile" with an empty
 * password. - There must be 2 users, whose usernames are "user0" and "admin".
 * All passwords should simply be "pass". - Rather than implementing this from
 * scratch, we suggest reusing the example configuration from the OAuth 2.0
 * example in GitHub by copying these classes over:
 * https://github.com/juleswhite
 * /mobilecloud-14/tree/master/examples/9-VideoServiceWithOauth2
 * /src/main/java/org/magnum/mobilecloud/video/auth You will need to @Import the
 * OAuth2SecurityConfiguration into your Application or other configuration
 * class to enable OAuth 2.0. You will also need to remove one of the
 * containerCustomizer() methods in either OAuth2SecurityConfiguration or
 * Application (they are the exact same code). You may need to customize the
 * users in the OAuth2Config constructor or the security applied by the
 * ResourceServer.configure(...) method. You should determine what (if any)
 * adaptations are needed by comparing this and the test specification against
 * the code in that class.
 * 
 * GET /video - Returns the list of videos that have been added to the server as
 * JSON. The list of videos should be persisted using Spring Data. The list of
 * Video objects should be able to be unmarshalled by the client into a
 * Collection<Video>. - The return content-type should be application/json,
 * which will be the default if you use @ResponseBody
 * 
 * 
 * POST /video - The video metadata is provided as an application/json request
 * body. The JSON should generate a valid instance of the Video class when
 * deserialized by Spring's default Jackson library. - Returns the JSON
 * representation of the Video object that was stored along with any updates to
 * that object made by the server. - **_The server should store the Video in a
 * Spring Data JPA repository. If done properly, the repository should handle
 * generating ID's._** - A video should not have any likes when it is initially
 * created. - You will need to add one or more annotations to the Video object
 * in order for it to be persisted with JPA.
 * 
 * GET /video/{id} - Returns the video with the given id or 404 if the video is
 * not found.
 * 
 * POST /video/{id}/like - Allows a user to like a video. Returns 200 Ok on
 * success, 404 if the video is not found, or 400 if the user has already liked
 * the video. - The service should should keep track of which users have liked a
 * video and prevent a user from liking a video twice. A POJO Video object is
 * provided for you and you will need to annotate and/or add to it in order to
 * make it persistable. - A user is only allowed to like a video once. If a user
 * tries to like a video a second time, the operation should fail and return 400
 * Bad Request.
 * 
 * POST /video/{id}/unlike - Allows a user to unlike a video that he/she
 * previously liked. Returns 200 OK on success, 404 if the video is not found,
 * and a 400 if the user has not previously liked the specified video.
 * 
 * GET /video/{id}/likedby - Returns a list of the string usernames of the users
 * that have liked the specified video. If the video is not found, a 404 error
 * should be generated.
 * 
 * GET /video/search/findByName?title={title} - Returns a list of videos whose
 * titles match the given parameter or an empty list if none are found.
 * 
 * GET /video/search/findByDurationLessThan?duration={duration} - Returns a list
 * of videos whose durations are less than the given parameter or an empty list
 * if none are found.
 * 
 * 
 * The VideoSvcApi interface described below should be used as the ultimate
 * ground truth for what should be implemented in the assignment. If there are
 * any details in the description above that conflict with the VideoSvcApi
 * interface below, use the details in the VideoSvcApi interface and report the
 * discrepancy on the course forums.
 * 
 * For the ultimate ground truth of how the assignment will be graded, please
 * see AutoGradingTest, which shows the specific tests that will be run to grade
 * your solution.
 * 
 * @author jules
 * 
 * 
 */
public interface SymptomSvcApi {

	// TODO
	// the path to the authentication web service
	public static final String TOKEN_PATH = "/oauth/token";
	// The path where we expect the PatientSvc to live
	final String PATIENT_SVC_PATH = "/patient";
	// The path where we expect the DoctorSvc to live
	final String DOCTOR_SVC_PATH = "/doctor";
	// The path to add user
	final String ADD_USER = "/addUser";
	// The path to add the registration id of the device for the push
	// notification to the user account
	final String ADD_REGID = "/addRegId";
	// The path to add the registration id of the device for the push
	// notification to the doctor account
	final String ADD_REGID_DOCTOR = DOCTOR_SVC_PATH + "/addRegId";
	// The path to add the registration id of the device for the push
		// notification to the patient account
		final String ADD_REGID_PATIENT = PATIENT_SVC_PATH + "/addRegId";
	// the parameter for the registration id
	final String REGID_PARAMETER = "regId";
	// the path for the test web service to check the authentication of the user
	final String TEST = "/test";
	// the path for the test web service to populate the account table
	final String POPULATE_ACCOUNT_TABLE = "/populateUsers";
	// the path for the test web service to populate the patient's details table
	final String POPULATE_PATIENTS_TABLE = PATIENT_SVC_PATH
			+ "/populatePatients";
	// the path for the test web service to populate the doctor's details table
	final String POPULATE_DOCTOR_TABLE = DOCTOR_SVC_PATH + "/populateDoctors";
	// the path to get the patient's profile
	final String GET_PATIENT_PROFILE = PATIENT_SVC_PATH
			+ "/{username}/getPatientProfile";
	// the parameter for the username
	final String USERNAME = "username";
	// the path to create the patient's profile
	final String CREATE_PATIENT_PROFILE = PATIENT_SVC_PATH
			+ "/createPatientProfile";
	// the path to update the patient's profile
	final String UPDATE_PATIENT_PROFILE = PATIENT_SVC_PATH
			+ "/updatePatientProfile";
	//
	final String GET_MEDICATION = PATIENT_SVC_PATH + "/getMedication/{id}";
	// the parameter for the id
	final String ID = "id";
	// the parameter for the id2
	final String ID2 = "id2";
	// the path to send the current check in (questionnair) from patient
	final String SEND_CHECKIN = PATIENT_SVC_PATH + "/sendCheckin";
	// the path to send a push notification to a doctor
	final String SEND_PUSH_2_DOCTOR = PATIENT_SVC_PATH + "/sendPush/{id}";
	// the parameter for the title
	final String TITLE = "title";
	// the parameter for the message
	final String MESSAGE = "message";
	// the path to get the doctor's profile
	final String GET_DOCTOR_PROFILE = DOCTOR_SVC_PATH
			+ "/{username}/getDoctorProfile";
	// the path to create the doctor's profile
	final String CREATE_DOCTOR_PROFILE = DOCTOR_SVC_PATH
			+ "/createDoctorProfile";
	// the path to update the doctor's profile
	final String UPDATE_DOCTOR_PROFILE = DOCTOR_SVC_PATH
			+ "/updateDoctorProfile";
	// the path to get the list of patients of the selected doctor
	final String GET_PATIENT_LIST = DOCTOR_SVC_PATH + "/{id}/getPatientList";
	// the path to get all the available patients.The ones that doesn't have any
	// doctor
	final String GET_AVAILABLE_PATIENTS = DOCTOR_SVC_PATH
			+ "/getAvailablePatients";
	// the path to get all the check ins of the current patient
	final String GET_PATIENTS_CHECKINS = DOCTOR_SVC_PATH + "/getCheckins/{id}";
	// the path to get the selected patient's profile
	final String GET_PATIENT_PROFILE_DOCTOR = DOCTOR_SVC_PATH
			+ "/getPatientProfile/{id}";
	// the path to get the patient's doctor profile
	final String GET_DOCTOR_PROFILE_PATIENT = PATIENT_SVC_PATH
			+ "/getDoctorProfile/{id}";
	//
	final String ADD_MEDICATION = DOCTOR_SVC_PATH + "/addMedication";
	//
	final String REMOVE_MEDICATION = DOCTOR_SVC_PATH + "/removeMedication/{id}";
	//
	final String SEND_PUSH_2_PATIENT = DOCTOR_SVC_PATH + "/sendPush/{id}";

	final String UDATE_PATIENT_PROFILE = DOCTOR_SVC_PATH
			+ "/{id}/updateProfilePatient/{id2}";
	

	final String REMOVE_PATIENT = DOCTOR_SVC_PATH
			+ "/removePatient/{id}";

	// ---------------- GENERAL WEB SERVICES ----------------
	/**
	 * 
	 * @param account
	 * @return
	 */
	@POST(ADD_USER)
	public Account addUser(@Body Account account);

	/**
	 * 
	 * @param list
	 * @return
	 */
	@POST(POPULATE_ACCOUNT_TABLE)
	public Void populateUsers(@Body ArrayList<Account> list);

	/**
	 * 
	 * @param list
	 * @return
	 */
	@POST(POPULATE_PATIENTS_TABLE)
	public Void populatePatientsProfiles(@Body ArrayList<PatientDetail> list);

	/**
	 * 
	 * @param list
	 * @return
	 */
	@POST(POPULATE_DOCTOR_TABLE)
	public Void populateDoctorsProfiles(@Body ArrayList<DoctorDetail> list);

	/**
	 * 
	 * @param account
	 * @return
	 */
	@POST(ADD_REGID)
	public Account addRegIdTo(@Body Account account,
			@Query(REGID_PARAMETER) String regId);

	/**
	 * 
	 * @param account
	 * @return
	 */
	@GET(TEST)
	public Void getTest();

	// ---------------- PATIENT'S WEB SERVICES ----------------
	/**
	 * 
	 */
	@GET(GET_PATIENT_PROFILE)
	public PatientDetail getProfilePatient(@Path(USERNAME) String username);

	/**
	 * 
	 */
	@POST(CREATE_PATIENT_PROFILE)
	public PatientDetail createProfilePatient(@Body PatientDetail details);

	/**
	 * 
	 */
	@POST(UPDATE_PATIENT_PROFILE)
	public PatientDetail updateProfilePatient(@Body PatientDetail details);

	/**
	 * 
	 */
	@GET(GET_MEDICATION)
	public ArrayList<Medication> getMedication(@Path(ID) long id);

	/**
	 * 
	 */
	@POST(SEND_CHECKIN)
	public Void sendCheckIn(@Query(ID) long id,@Query("raw") String raw, @Query("idPatient") long idPatient, @Query("time") long time);

	/**
	 * 
	 */
	@POST(SEND_PUSH_2_DOCTOR)
	public Void sendPushDoctor(@Path(ID) long id, @Query(TITLE) String title,
			@Query(MESSAGE) String message);

	// ---------------- DOCTOR'S WEB SERVICES ----------------

	/**
	 * 
	 */
	@GET(GET_DOCTOR_PROFILE)
	public DoctorDetail getProfileDoctor(@Path(USERNAME) String username);

	/**
	 * 
	 */
	@POST(CREATE_DOCTOR_PROFILE)
	public PatientDetail createProfileDoctor(@Body DoctorDetail details);

	/**
	 * 
	 */
	@POST(UPDATE_DOCTOR_PROFILE)
	public DoctorDetail updateProfileDoctor(@Body DoctorDetail details);

	/**
	 * 
	 */
	@GET(GET_PATIENT_LIST)
	public ArrayList<PatientDetail> getPatientList(@Path(ID) long id);

	/**
	 * 
	 */
	@GET(GET_AVAILABLE_PATIENTS)
	public ArrayList<PatientDetail> getAvailablePatients();

	/**
	 * 
	 */
	@GET(GET_PATIENTS_CHECKINS)
	public ArrayList<CheckIn> getCheckins(@Path(ID) long id);

	/**
	 * 
	 */
	@GET(GET_PATIENT_PROFILE_DOCTOR)
	public PatientDetail getPatientProfile(@Path(ID) long id);
	
	/**
	 * 
	 */
	@GET(GET_DOCTOR_PROFILE_PATIENT)
	public DoctorDetail getDoctorProfile(@Path(ID) long id);

	/**
	 * 
	 */
	@POST(ADD_MEDICATION)
	public String addMedication(@Query(ID) long id, @Query("name") String name,
			@Query("description") String description,
			@Query("idPatient") long idPatient);

	/**
	 * 
	 */
	@POST(REMOVE_MEDICATION)
	public String removeMedication(@Path(ID) long id);

	/**
	 * 
	 */
	@POST(SEND_PUSH_2_PATIENT)
	public Void sendPushPatient(@Path(ID) long id, @Query(TITLE) String title,
			@Query(MESSAGE) String message);

	/**
	 * 
	 * TODO
	 */
	@GET(UDATE_PATIENT_PROFILE)
	public Void addPatient(@Path(ID) long id, @Path(ID2) long id2);

	
	/**
	 * 
	 * TODO
	 */
	@GET(REMOVE_PATIENT)
	public Void removePatient(@Path(ID) long id2);

	/**
	 * 
	 * @param account
	 * @return
	 */
	@POST(ADD_REGID_DOCTOR)
	public DoctorDetail addRegIdToDoctor(@Query("id") long id,
			@Query(REGID_PARAMETER) String regId);
	/**
	 * 
	 * @param account
	 * @return
	 */
	@POST(ADD_REGID_PATIENT)
	public PatientDetail addRegIdToPatient(@Query("id") long id,
			@Query(REGID_PARAMETER) String regId);
}
