package org.coursera.symptommanager;

import java.util.concurrent.Callable;

import org.coursera.symptommanager.doctorUI.MainDoctor;
import org.coursera.symptommanager.objects.Account;
import org.coursera.symptommanager.objects.PatientDetail;
import org.coursera.symptommanager.patientUI.MainPatient;
import org.coursera.symptommanager.services.ScreenReceiverService;

import retrofit.RetrofitError;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.Application;
import android.app.PendingIntent;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.SystemClock;
import android.util.Log;
import android.widget.Toast;

import com.google.android.gcm.GCMRegistrar;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;

public class Splash extends Activity {

	// the name of the shared preferences
	String ID = "symptomMngr";
	// the parameter for the username
	String USERNAME = "username";
	// the parameter for the password
	String PASSWORD = "password";
	// the parameter for the server
	String SERVER = "server";
	// the parameter for the role of the user
	String ROLE = "role";
	// the parameter for the role Doctor
	String DOCTOR = "doctor";
	// the parameter for the id
	String ID_PARAMETER = "id";
	// the parameter for the id
	String SEVERE_PAIN = "severe_pain";
	// the parameter for the id
	String MODERATE_PAIN = "moderate_pain";
	// the parameter for the id
	String CANT_EAT = "cant_eat";
	// create a handler that will delay for 3 seconds (we do that in order the
	// computations we want to be executed and also to create the feel for the
	// splash screen :)
	Handler handler;
	// the currently logged in patient
	PatientDetail profile;
	// the tag id for the play services check request
	private final static int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// setting the menu to a style with no action bar
		setTheme(android.R.style.Theme_Holo_Light_NoActionBar);
		// setting the layout
		setContentView(R.layout.splash);
		// start the service that will enables the broadcast receiver that
		// captures the on/off screen events
		startService(new Intent(this, ScreenReceiverService.class));
		// get the shared preferences with mode private
		Constants.settings = getSharedPreferences(ID, Application.MODE_PRIVATE);

		handler = new Handler();
		handler.postDelayed(new Runnable() {

			@Override
			public void run() {

				registerDevice4PushNotifications();
			}
		}, 3000);
	}

	/**
	 * if username/password is NOT empty the user is logged in and the method
	 * returns true otherwise is NOT logged in and the method returns false
	 */
	private boolean checkIfUserIsLoggedIn() {

		Constants.USERNAME = Constants.settings.getString(USERNAME, "");
		Constants.PASSWORD = Constants.settings.getString(PASSWORD, "");
		Constants.ROLE = Constants.settings.getString(ROLE, "");
		Constants.SERVER = Constants.settings.getString(SERVER, "");
		Constants.ID = Constants.settings.getLong(ID_PARAMETER, -1);
		// CONSTANTS.SEVERE_PAIN = CONSTANTS.SETTINGS.GETLONG(SEVERE_PAIN, 0);
		// CONSTANTS.MODERATE_PAIN = CONSTANTS.SETTINGS.GETLONG(MODERATE_PAIN,
		// 0);
		// CONSTANTS.CANT_EAT = CONSTANTS.SETTINGS.GETLONG(CANT_EAT, 0);

		if (Constants.USERNAME.equalsIgnoreCase("")) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * Check's if google play services are installed on the device. If any error
	 * open dialog with action
	 */
	private boolean checkPlayServices() {
		int resultCode = GooglePlayServicesUtil
				.isGooglePlayServicesAvailable(this);
		if (resultCode != ConnectionResult.SUCCESS) {
			if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
				GooglePlayServicesUtil.getErrorDialog(resultCode, this,
						PLAY_SERVICES_RESOLUTION_REQUEST).show();
			} else {
				finish();
			}
			return false;
		}
		return true;
	}

	/**
	 * Register the device to get push notifications
	 */
	private void registerDevice4PushNotifications() {

		// here we will check if the device has the latest google play
		// services because is been needed in order to make the push to work
		if (checkPlayServices()) {

			// we check for the registration id of the device with the
			// GCM Push notification Service
			GCMRegistrar.checkDevice(Splash.this);
			GCMRegistrar.checkManifest(Splash.this);
			Constants.regId = GCMRegistrar.getRegistrationId(Splash.this);
			// if regID = "" then the device is not register so we have to
			// register the device
			if (Constants.regId.equals("")) {
				// here we register the device. This action is asynchronous so
				// when the device is indeed registered the method
				// onRegistered()
				// in the GCMIntentClass will be called then I will assign the
				// registration id to the current logged in user
				GCMRegistrar.register(Splash.this, Constants.project_id);

				// check if the user is logged in
				if (checkIfUserIsLoggedIn()) {
					// if he/she is first we will authenticate the user and then
					// we will create a client with the credentials of the user
					authenticateUserAndCreateClient();
					// create the account of the user with the received
					// information from the shared preferencies
					Constants.account = new Account(Constants.ID,
							Constants.USERNAME, Constants.PASSWORD,
							Constants.regId, Constants.ROLE);
					// then we will use an intent to go to the
					// MainPatient.class if the user is a patient or in the
					// MainDoctor.class if the user is a doctor
					if (Constants.ROLE.equalsIgnoreCase(DOCTOR)) {
						startActivity(new Intent(Splash.this, MainDoctor.class));
					} else {
						// setup the alarm manager to alarm the application on
						// the previous selected notification time which is 6
						// hours 4 times a day by default because is the first
						// time the application run because the registration id
						// is ""
						int REFRESH_RATE = 6 * (60 * 60 * 1000);
						AlarmManager mAlarmManager = (AlarmManager) Splash.this
								.getSystemService(ALARM_SERVICE);
						Intent mNotificationReceiverIntent = new Intent(
								Splash.this,
								org.coursera.symptommanager.broadcastReceivers.AlarmHandler.class);
						PendingIntent mNotificationReceiverPendingIntent = PendingIntent
								.getBroadcast(Splash.this, 0,
										mNotificationReceiverIntent, 0);
						mAlarmManager.setRepeating(
								AlarmManager.ELAPSED_REALTIME_WAKEUP,
								SystemClock.elapsedRealtime() + REFRESH_RATE,
								REFRESH_RATE,
								mNotificationReceiverPendingIntent);
						startActivity(new Intent(Splash.this, MainPatient.class));
					}
				} else {
					// if the user in not logged in the we will use an intent to
					// go to the LoginScreenActivity.class in order the user to
					// login
					startActivity(new Intent(Splash.this,
							LoginScreenActivity.class));
				}

			} else {
				// check if the user is logged in
				if (checkIfUserIsLoggedIn()) {
					// if he/she is first we will authenticate the user and then
					// we will create a client with the credentials of the user
					authenticateUserAndCreateClient();
					// create the account of the user with the received
					// information from the shared preferencies
					Constants.account = new Account(Constants.ID,
							Constants.USERNAME, Constants.PASSWORD,
							Constants.regId, Constants.ROLE);
					// then we will use an intent to go to the
					// MainPatient.class if the user is a patient or in the
					// MainDoctor.class if the user is a doctor
					if (Constants.ROLE.equalsIgnoreCase(DOCTOR)) {
						startActivity(new Intent(Splash.this, MainDoctor.class));
					} else {
						// get patient profile
						new getPatientProfile().execute();

					}
				} else {
					// if the user in not logged in the we will use an intent to
					// go to the LoginScreenActivity.class in order the user to
					// login
					startActivity(new Intent(Splash.this,
							LoginScreenActivity.class));
				}

			}

		}
	}

	/**
	 * Authenticate's the user and then create a client with the credentials of
	 * the user
	 */
	private void authenticateUserAndCreateClient() {
		Constants.svc = SymptomSvc.init(
				"https://" + Constants.SERVER + ":8443", Constants.USERNAME,
				Constants.PASSWORD);

		CallableTask.invoke(new Callable<Void>() {

			@Override
			public Void call() throws Exception {
				return Constants.svc.getTest();
			}
		}, new TaskCallback<Void>() {

			@Override
			public void success(Void result) {
				// OAuth 2.0 grant was successful
				// now we can add all the users to the database
				// if they are already there we wont do anything
				new populateAccounts().execute();
			}

			@Override
			public void error(Exception e) {
				Log.e(LoginScreenActivity.class.getName(),
						"Error logging in via OAuth.", e);

				Toast.makeText(
						Splash.this,
						"Login failed, check your Internet connection and credentials.",
						Toast.LENGTH_SHORT).show();
			}
		});

	}

	public class populateAccounts extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				Constants.svc.populateUsers(Constants.listOfAccounts);
				Constants.svc
						.populatePatientsProfiles(Constants.listOfPatients);
				Constants.svc.populateDoctorsProfiles(Constants.listOfDoctors);
			} catch (final RetrofitError e) {
				Constants.reportIssue(Splash.this, e.getMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {

		}

		@Override
		protected void onPreExecute() {
			Constants.fillListWithUsers();
		}
	}

	public class getPatientProfile extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				profile = Constants.svc.getProfilePatient(Constants.account
						.getUsername());

			} catch (final RetrofitError e) {
				Constants.reportIssue(Splash.this, e.getMessage());
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// setup the alarm manager to alarm the application on
			// the previus selected notification time
			int REFRESH_RATE = profile.getNotifyTime() * (60 * 60 * 1000);
			AlarmManager mAlarmManager = (AlarmManager) Splash.this
					.getSystemService(ALARM_SERVICE);
			Intent mNotificationReceiverIntent = new Intent(
					Splash.this,
					org.coursera.symptommanager.broadcastReceivers.AlarmHandler.class);
			PendingIntent mNotificationReceiverPendingIntent = PendingIntent
					.getBroadcast(Splash.this, 0, mNotificationReceiverIntent,
							0);
			mAlarmManager.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,
					SystemClock.elapsedRealtime() + REFRESH_RATE, REFRESH_RATE,
					mNotificationReceiverPendingIntent);

			startActivity(new Intent(Splash.this, MainPatient.class));
		}

		@Override
		protected void onPreExecute() {
		}
	}

}