package org.coursera.symptommanager.doctorUI;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;

import org.coursera.symptommanager.Constants;
import org.coursera.symptommanager.LoginScreenActivity;
import org.coursera.symptommanager.R;
import org.coursera.symptommanager.objects.DoctorDetail;
import org.coursera.symptommanager.objects.Medication;
import org.coursera.symptommanager.objects.PatientDetail;

import retrofit.RetrofitError;
import android.app.AlertDialog;
import android.app.Fragment;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class PatientDetailsFragment extends Fragment {


	// selected patient ID
	long patientID;
	// id parameter
	String ID = "id";
	// showing details parameter
	String DETAILS = "details";
	// selected doctor ID
	long doctorID;
	// id parameter for doctor
	String IDD = "idd";

	// declare the views
	RelativeLayout layout;
	TextView name;
	TextView surname;
	TextView email;
	TextView phone;
	TextView dob;
	TextView gender;
	TextView medication;
	ProgressBar loading;
	ProgressBar progressBar1;
	// the progress bar inside the remove medication dialog
	ProgressBar progressBar2;
	// the list which will be inside the remove medication dialog
	ListView list_medication;
	// the array list with the patient's medications
			ArrayList<Medication> medicationList;
		// the selected medication from the docotr
			Medication SELECTED_MEDICATION;
			// the dialogs that will pop up after the click on the menu in each patient
			AlertDialog addDialog;
			AlertDialog removeDialog;
			// the string that will hold the result of a web service
			String RESPONSE = "";
	// the selected patient's profile
	PatientDetail patientProfile;
	// the doctor's profile
	DoctorDetail doctorProfile;

	// the parameter for the username
	String USERNAME = "username";
	// the parameter for the password
	String PASSWORD = "password";
	// the parameter for the server
	String SERVER = "server";
	// the parameter for the role of the user
	String ROLE = "role";

	// when fragments is created
	@Override
	public void onCreate(Bundle savedInstanceState) {
		Bundle bundle = this.getArguments();
		if (bundle != null) {
			patientID = bundle.getLong(ID, 0);
			doctorID = bundle.getLong(IDD, 0);
		}
		// that means that in the the fragment will create an
		// option menu in the action bar
		setHasOptionsMenu(true);
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		ViewGroup rootView = (ViewGroup) inflater.inflate(
				R.layout.patient_details_fragment, container, false);
		name = (TextView) rootView.findViewById(R.id.name);
		layout = (RelativeLayout) rootView.findViewById(R.id.layout);
		surname = (TextView) rootView.findViewById(R.id.surname);
		email = (TextView) rootView.findViewById(R.id.email);
		phone = (TextView) rootView.findViewById(R.id.phone);
		dob = (TextView) rootView.findViewById(R.id.dob);
		gender = (TextView) rootView.findViewById(R.id.gender);
		medication = (TextView) rootView.findViewById(R.id.medication);
		loading = (ProgressBar) rootView.findViewById(R.id.progressBar1);
		loading.setVisibility(View.GONE);
		getPatientProfile();
		return rootView;
	}

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		// Inflate the menu items for use in the action bar
		inflater.inflate(
				getResources().getIdentifier("patient_detail", "menu",
						getActivity().getPackageName()), menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// get the id of the clicked item
		int itemId = item.getItemId();
		// get the id of the send button
		int about = R.id.about;
		int call = R.id.call;
		int email = R.id.email;
		int add = R.id.add;
		int remove = R.id.remove;
		int logout = R.id.logout;

		if (itemId == about) {
			// flip the card in order to show the patient details
			flipCard();
			return true;
		} else if (itemId == call) {
			// fetch all the patients that doesn't have an assigned doctor
			if (patientProfile == null
					|| patientProfile.getPhone().equalsIgnoreCase("")) {
				Toast.makeText(getActivity(),
						getString(R.string.no_phone_patient), Toast.LENGTH_LONG)
						.show();
			} else {
				Intent callIntent = new Intent(Intent.ACTION_CALL);
				callIntent
						.setData(Uri.parse("tel:" + patientProfile.getPhone()));
				startActivity(callIntent);
			}
			return true;
		} else if (itemId == email) {
			if (patientProfile == null
					|| patientProfile.getEmail().equalsIgnoreCase("")) {
				Toast.makeText(getActivity(),
						getString(R.string.no_email_patient), Toast.LENGTH_LONG)
						.show();
			} else {
				Intent i = new Intent(Intent.ACTION_SEND);
				i.setType("message/rfc822");
				i.putExtra(Intent.EXTRA_EMAIL,
						new String[] { patientProfile.getEmail() });
				i.putExtra(Intent.EXTRA_SUBJECT,
						"Email from Dr. " + doctorProfile.getName() + " "
								+ doctorProfile.getSurname());
				try {
					startActivity(Intent.createChooser(i,
							getString(R.string.send_email)));
				} catch (android.content.ActivityNotFoundException ex) {
					Toast.makeText(getActivity(),
							getString(R.string.no_email_client),
							Toast.LENGTH_SHORT).show();
				}
			}
			return true;
		} else if (itemId == add) {
			// will open a dialog to prompt doctor to add a medication
			// name and description and add it to the patient
			addMedication();
			return true;
		} else if (itemId == remove) {
			// will open a dialog with all the medications of the
			// patient so the doctor can select which to remove
			removeMedication();
			return true;
		} else if (itemId == logout) {
			// erase shared preferences and clear static values and redirect
			// user to login screen
			Constants.USERNAME = "";
			Constants.PASSWORD = "";
			Constants.SERVER = "";
			Constants.ROLE = "";
			Constants.ID = -1;
			Editor edit = Constants.settings.edit();
			edit.putString(USERNAME, "");
			edit.putString(PASSWORD, "");
			edit.putString(SERVER, "");
			edit.putString(ROLE, "");
			edit.putLong(ID, -1);
			edit.commit();

			// clear back stack so the user can't navigate back
			Intent intent = new Intent(getActivity(), LoginScreenActivity.class);
			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
					| Intent.FLAG_ACTIVITY_CLEAR_TASK);
			startActivity(intent);
			Toast.makeText(getActivity(), getString(R.string.logged_out),
					Toast.LENGTH_LONG).show();
			return true;
		} else {
			return super.onOptionsItemSelected(item);
		}

	}

	private void flipCard() {
		if (SelectedPatient.mShowingBack) {
			SelectedPatient.mShowingBack = false;
			getFragmentManager().popBackStack();
			return;
		}
	}

	private void getPatientProfile() {
		new getPatientData().execute();
	}

	public class getPatientData extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				patientProfile = Constants.svc.getPatientProfile(patientID);
				doctorProfile = Constants.svc.getDoctorProfile(doctorID);
				medicationList = Constants.svc.getMedication(patientID);
			} catch (final RetrofitError e) {
				Constants.reportIssue(getActivity(), e.getMessage());
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			loading.setVisibility(View.GONE);
			layout.setClickable(true);
			getActivity().getActionBar().setTitle(
					getString(R.string.Dr) + " " + doctorProfile.getName()
							+ " " + doctorProfile.getSurname());
			getActivity().getActionBar().setSubtitle(
					getString(R.string.overview) + " "
							+ patientProfile.getName() + " "
							+ patientProfile.getSurname());
			name.setText(patientProfile.getName());
			surname.setText(patientProfile.getSurname());
			if (patientProfile.getEmail().equalsIgnoreCase("")) {
				email.setText(" - ");
			} else {
				email.setText(patientProfile.getEmail());
			}
			if (patientProfile.getPhone().equalsIgnoreCase("")) {
				phone.setText(" - ");
			} else {
				phone.setText(patientProfile.getPhone());
			}
			dob.setText(convertDateToReadableDate(patientProfile.getDob()));
			gender.setText(patientProfile.getGender());
			StringBuilder meds = new StringBuilder(1000);
			for (int i=0; i<medicationList.size(); i++){
				meds.append(medicationList.get(i).getName() + "\n\n");
			}
			medication.setText(meds);
		}

		@Override
		protected void onPreExecute() {
			loading.setVisibility(View.VISIBLE);
			layout.setClickable(false);
		}
	}

	@Override
	public void onResume() {
		super.onResume();
		// check if screen is on if it is then show welcome message
		if (Constants.USERNAME.equalsIgnoreCase("")) {

		} else {
			if (Constants.SCREEN_ON) {
				Constants.showWelcomeMsg(getActivity(), layout);
			}

		}
	}

	/**
	 * 
	 * Converts the provided milliseconds to a readable date in the form of Mon
	 * 4 Jan 2014 at 18:45
	 * 
	 * @param mills
	 * @return
	 */
	private String convertDateToReadableDate(long mills) {

		// get the locale in order to avoid lint check in the SimpleDateFormat
		Locale current = getResources().getConfiguration().locale;
		// instantiate the string for the result of the date
		String result = "";
		// Create a DateFormatter object for displaying date in specified
		// format.
		SimpleDateFormat dateFormater = new SimpleDateFormat("EEE dd MMM yyyy",
				current);
		SimpleDateFormat timeFormater = new SimpleDateFormat("HH:mm", current);

		// Create a calendar object that will convert the date and time value in
		// milliseconds to date.
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(mills);
		result = dateFormater.format(calendar.getTime()) + " at "
				+ timeFormater.format(calendar.getTime());
		return result;
	}

	/**
	 * Opens a dialog and prompt doctor to add a name and a description of the
	 * medication he/she want to give to the selected patient
	 * 
	 */
	private void addMedication() {
		AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		LayoutInflater inflater = getActivity().getLayoutInflater();
		View view = inflater.inflate(R.layout.add_medication_dialog, null);
		builder.setView(view);
		builder.setTitle(getString(R.string.add_medication));
		// instantiate the views
		final EditText title = (EditText) view.findViewById(R.id.title);
		final EditText description = (EditText) view
				.findViewById(R.id.description);
		progressBar1 = (ProgressBar) view.findViewById(R.id.progressBar1);
		progressBar1.setVisibility(View.GONE);

		builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {
				if (title.getText().toString().equalsIgnoreCase("")
						|| description.getText().toString()
								.equalsIgnoreCase("")) {
					Toast.makeText(getActivity(),
							getString(R.string.empty_mediaction),
							Toast.LENGTH_LONG).show();
				} else {
					SELECTED_MEDICATION = new Medication(-1, title.getText()
							.toString(), description.getText().toString(),
							patientID);
					new addMediaction().execute();
				}
				addDialog.dismiss();
			}
		});

		builder.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
					}
				});
		addDialog = builder.create();
		addDialog.show();
	}

	/**
	 * It will execute the add medication web service to add the selected
	 * medication to the patient
	 * 
	 */
	public class addMediaction extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				Constants.svc.addMedication(patientID,
						SELECTED_MEDICATION.getName(),
						SELECTED_MEDICATION.getDesciption(),
						SELECTED_MEDICATION.getIdPatient());
				medicationList = Constants.svc.getMedication(patientID);
			} catch (final RetrofitError e) {
				Constants.reportIssue(getActivity(), e.getMessage());
				RESPONSE = e.getMessage();
			}
			if (RESPONSE.equalsIgnoreCase("")) {
				Constants.reportIssue(getActivity(),
						getString(R.string.add_medication_ok));
					Constants.svc.sendPushPatient(patientID,
							"New medication added",
							"Medication " + SELECTED_MEDICATION.getName() + " just added by your doctor");
			} else {
				RESPONSE = "";
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			progressBar1.setVisibility(View.GONE);
			layout.setClickable(true);
			StringBuilder meds = new StringBuilder(1000);
			for (int i=0; i<medicationList.size(); i++){
				meds.append(medicationList.get(i).getName() + "\n\n");
			}
			medication.setText(meds);
		}

		@Override
		protected void onPreExecute() {
			medicationList = new ArrayList<Medication>();
			progressBar1.setVisibility(View.VISIBLE);
			layout.setClickable(false);
		}
	}

	/**
	 * Opens a dialog with the assigned medications of the patient and lets the
	 * doctor to remove a mediaction
	 * 
	 */
	private void removeMedication() {
		AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		LayoutInflater inflater = getActivity().getLayoutInflater();
		View view = inflater.inflate(R.layout.remove_medication_dialog, null);
		builder.setView(view);
		builder.setTitle(getString(R.string.assigned_medication));
		// instantiate the views
		list_medication = (ListView) view.findViewById(R.id.madication_list);

		progressBar2 = (ProgressBar) view.findViewById(R.id.progressBar2);
		progressBar2.setVisibility(View.GONE);

		builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {
				removeDialog.dismiss();
			}
		});
		removeDialog = builder.create();
		removeDialog.show();
		getAvailableMedication();
	}
	

	
	/**
	 * Loads the available medication of the selected patient
	 */
	private void getAvailableMedication() {
		new getAvailableMeds().execute();
	}

	/**
	 * It will execute the get medication web service to fetch the medication of
	 * the selected the patient
	 * 
	 */
	public class getAvailableMeds extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {

			try {
				medicationList = Constants.svc
						.getMedication(patientID);
			} catch (final RetrofitError e) {
				Constants.reportIssue(getActivity(), e.getMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			progressBar2.setVisibility(View.GONE);
			layout.setClickable(true);
			if (medicationList == null) {
				Toast.makeText(getActivity(),
						getString(R.string.no_medication), Toast.LENGTH_LONG)
						.show();
			} else {
				list_medication
						.setAdapter(new MyAdapter2(getActivity(),
								getResources().getIdentifier(
										"simple_list_item_1", "layout",
										getActivity().getPackageName()), 0, medicationList));
			}
		}

		@Override
		protected void onPreExecute() {
			progressBar2.setVisibility(View.VISIBLE);
			layout.setClickable(false);
		}
	}

	// holder class for the list view
	static class ViewHolder2 {

		public TextView name;

	}

	ViewHolder2 holder2;

	// this is the class of the adapter that shows the list of medication
	private class MyAdapter2 extends ArrayAdapter<Medication> {

		public MyAdapter2(Context context, int resource,
				int textViewResourceId, ArrayList<Medication> list) {
			super(context, resource, textViewResourceId, list);
		}

		@Override
		public View getView(final int position, View convertView,
				ViewGroup parent) {
			View row = convertView;
			if (row == null || row.getTag() == null) {
				holder2 = new ViewHolder2();
				// setup the item layout view
				LayoutInflater inflater = (LayoutInflater) getActivity()
						.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				row = inflater.inflate(R.layout.medication_item, parent, false);
				holder2.name = (TextView) row
						.findViewById(R.id.title_medication);

			} else {
				holder2 = (ViewHolder2) row.getTag();
			}

			// set data to each view
			holder2.name.setText(medicationList.get(position).getName());
			list_medication.setOnItemClickListener(new OnItemClickListener() {

				@Override
				public void onItemClick(AdapterView<?> parent, View view,
						int position, long id) {
					// a dialog to make sure that the doctor wants to delete
					// this medication
					askForDeletion(position);

				}
			});
			return row;
		}
	}

	/**
	 * Open a dialog and ask the doctor if he/she is sure to delete the
	 * medication if yes then delete the medication and update the list of
	 * medication
	 */
	private void askForDeletion(final int position) {
		AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

		builder.setMessage(R.string.delete_medication).setTitle(
				R.string.attention);
		builder.setPositiveButton(R.string.yes,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						SELECTED_MEDICATION = medicationList.get(position);
						new removeMedication().execute();
					}
				});
		builder.setNegativeButton(R.string.no,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
					}
				});
		builder.create().show();
	}

	/**
	 * It will execute the remove medication web service to remove theselected
	 * medication
	 * 
	 */
	public class removeMedication extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				Constants.svc.removeMedication(SELECTED_MEDICATION.getId());
				medicationList = Constants.svc.getMedication(patientID);
			} catch (final RetrofitError e) {
				Constants.reportIssue(getActivity(), e.getMessage());
				RESPONSE = e.getMessage();
			}
			if (RESPONSE.equalsIgnoreCase("")) {
				removeDialog.dismiss();
				Constants.reportIssue(getActivity(),
						getString(R.string.remove_medication_ok));

			} else {
				RESPONSE = "";
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			progressBar2.setVisibility(View.GONE);
			layout.setClickable(true);
			StringBuilder meds = new StringBuilder(1000);
			for (int i=0; i<medicationList.size(); i++){
				meds.append(medicationList.get(i).getName() + "\n\n");
			}
			medication.setText(meds);
		}

		@Override
		protected void onPreExecute() {
			medicationList = new ArrayList<Medication>();
			progressBar2.setVisibility(View.VISIBLE);
			layout.setClickable(false);
		}
	}
	
}
