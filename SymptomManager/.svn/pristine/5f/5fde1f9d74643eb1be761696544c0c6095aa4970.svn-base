package org.coursera.symptommanager;

import java.util.ArrayList;
import java.util.concurrent.Callable;

import org.coursera.symptommanager.doctorUI.MainDoctor;
import org.coursera.symptommanager.objects.Account;
import org.coursera.symptommanager.patientUI.MainPatient;

import retrofit.RetrofitError;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

/**TODO
 * 
 * This application uses ButterKnife. AndroidStudio has better support for
 * ButterKnife than Eclipse, but Eclipse was used for consistency with the other
 * courses in the series. If you have trouble getting the login button to work,
 * please follow these directions to enable annotation processing for this
 * Eclipse project:
 * 
 * http://jakewharton.github.io/butterknife/ide-eclipse.html
 * 
 */
public class LoginScreenActivity extends Activity {

	// here we will declare the view of the activity
	Spinner userName_;
	Switch role;
	EditText server_;
	EditText password_;
	Button loginButton;
	ImageView info;
	ProgressBar loading;
	RelativeLayout layout;

	// add https://ip:port

	// the parameter for the username
	String USERNAME = "username";
	// the parameter for the password
	String PASSWORD = "password";
	// the parameter for the server
	String SERVER = "server";
	// the parameter for the role of the user
	String ROLE = "role";
	// the parameter for the id of the user
	String ID = "id";
	// the string that will get the value from the edit text server_;
	String server = "";
	// the parameter for the role Doctor
	String DOCTOR = "doctor";
	// // the string that will get the value from the spinner username;
	String user;
	// // the string that will get the value from the switch role;
	String roleType = "patient";
	// Here we declare the array lists that will have the hard coded usernames
	// and passwords
	// and passwords NEVER DO THAT IN A REAL APPLICATION
	ArrayList<String> usernames;
	ArrayList<String> passwords;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_login_screen);
		// add title to the action bar
		getActionBar().setTitle(getString(R.string.login_activity_title));
		// here we instantiate the views
		layout = (RelativeLayout) findViewById(R.id.layout);
		loginButton = (Button) findViewById(R.id.loginButton);
		userName_ = (Spinner) findViewById(R.id.userName);
		password_ = (EditText) findViewById(R.id.password);
		server_ = (EditText) findViewById(R.id.server);
		info = (ImageView) findViewById(R.id.info);
		role = (Switch) findViewById(R.id.switch1);
		loading = (ProgressBar) findViewById(R.id.progressBar1);
		loading.setVisibility(View.GONE);
		// we make the edit text password not editable because we have hard
		// coded users and we want the password to be auto completed
		password_.setKeyListener(null);
		// here we instantiate the click listener for the image view
		info.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// we toast a message to the user to inform about the server
				// edit text
				Toast.makeText(LoginScreenActivity.this,
						getString(R.string.info_login), Toast.LENGTH_LONG)
						.show();

			}
		});
		// here we instantiate the login button click listener
		loginButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				login();
			}
		});

		userName_.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				user = usernames.get(position);
				password_.setText(passwords.get(position));

			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				user = "";

			}
		});
		role.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				if (isChecked) {
					roleType = "doctor";
				} else {
					roleType = "patient";
				}
				instantiateUsersAndPasswords(roleType);
			}

		});
		instantiateUsersAndPasswords(roleType);
	}

	/**
	 * Login the user via Oauth 2.0
	 */
	public void login() {
		loading.setVisibility(View.VISIBLE);
		layout.setClickable(false);
		String pass = password_.getText().toString();
		server = server_.getText().toString();
		Constants.account = new Account(-1, user, pass, "", roleType);
		Constants.svc = SymptomSvc.init("https://" + server + ":8443", user,
				pass);

		CallableTask.invoke(new Callable<Void>() {

			@Override
			public Void call() throws Exception {
				return Constants.svc.getTest();
			}
		}, new TaskCallback<Void>() {

			@Override
			public void success(Void result) {
				// OAuth 2.0 grant was successful so now
				// // we can add the account to the server
				// // we do that by calling this async task to execute the web
				// service
				// new addAccount().execute();
				// we can add all the users to the database
				// if they are already there we wont do anything
				new populateAccounts().execute();

			}

			@Override
			public void error(Exception e) {
				loading.setVisibility(View.GONE);
				layout.setClickable(true);
				Log.e(LoginScreenActivity.class.getName(),
						"Error logging in via OAuth.", e);

				Toast.makeText(
						LoginScreenActivity.this,
						"Login failed, check your Internet connection and credentials.",
						Toast.LENGTH_SHORT).show();
			}
		});

	}

	// public class addAccount extends AsyncTask<Void, Void, Void> {
	//
	// @Override
	// protected Void doInBackground(Void... params) {
	//
	// Constants.account = Constants.svc.addUser(Constants.account);
	// return null;
	// }
	//
	// @Override
	// protected void onPostExecute(Void result) {
	//
	// }
	//
	// @Override
	// protected void onPreExecute() {
	// }
	// }

	public class addRegId2Account extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				Constants.account = Constants.svc.addRegIdTo(Constants.account,
						Constants.regId);
			} catch (final RetrofitError e) {
				Constants.reportIssue(LoginScreenActivity.this, e.getMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			loading.setVisibility(View.GONE);
			// Here we will save the username, password, server, role to the
			// constants
			// values if we need to use them later
			Constants.USERNAME = Constants.account.getUsername();
			Constants.PASSWORD = Constants.account.getPassword();
			Constants.SERVER = server;
			Constants.ROLE = Constants.account.getRole();
			Constants.ID = Constants.account.getId();
			// and we save the credentials of the user to the shared
			// preferences so the next time the
			// user open the application to be logged in
			Editor edit = Constants.settings.edit();
			edit.putString(USERNAME, Constants.USERNAME);
			edit.putString(PASSWORD, Constants.PASSWORD);
			edit.putString(SERVER, Constants.SERVER);
			edit.putString(ROLE, Constants.ROLE);
			edit.putLong(ID, Constants.ID);
			edit.commit();
			if (Constants.ROLE.equalsIgnoreCase(DOCTOR)) {
				startActivity(new Intent(LoginScreenActivity.this,
						MainDoctor.class));
			} else {
				startActivity(new Intent(LoginScreenActivity.this,
						MainPatient.class));
			}
		}

		@Override
		protected void onPreExecute() {
		}
	}

	private void instantiateUsersAndPasswords(String role) {
		usernames = new ArrayList<String>();
		passwords = new ArrayList<String>();
		usernames.add("Username");
		passwords.add("");
		if (role.equalsIgnoreCase(DOCTOR)) {
			usernames.add("drJohn");
			passwords.add("dr32i");
			usernames.add("drPeter");
			passwords.add("dr54j");
		} else {
			usernames.add("george");
			passwords.add("pt12o");
			usernames.add("hope");
			passwords.add("pt66n");
			usernames.add("maria");
			passwords.add("pt19j");
			usernames.add("paul");
			passwords.add("pt06q");
		}
		userName_.setAdapter(new MyAdapter(LoginScreenActivity.this,
				android.R.layout.simple_spinner_item, 0, usernames));
	}

	private class MyAdapter extends ArrayAdapter<String> {

		public MyAdapter(Context context, int resource, int textViewResourceId,
				ArrayList<String> list) {
			super(context, resource, textViewResourceId, list);
		}

		@Override
		public View getDropDownView(int position, View convertView,
				ViewGroup parent) {
			LayoutInflater inflater = (LayoutInflater) LoginScreenActivity.this
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			final View row = inflater.inflate(
					android.R.layout.simple_dropdown_item_1line, parent, false);
			final TextView tv = (TextView) row.findViewById(android.R.id.text1);
			tv.setText(usernames.get(position));
			return row;
		}

		@Override
		public View getView(final int position, View convertView,
				ViewGroup parent) {
			// setup the item layout view
			LayoutInflater inflater = (LayoutInflater) LoginScreenActivity.this
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			final View row = inflater.inflate(
					android.R.layout.simple_spinner_item, parent, false);
			final TextView tv = (TextView) row.findViewById(android.R.id.text1);
			tv.setText(usernames.get(position));

			return row;
		}
	}

	public class populateAccounts extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				Constants.svc.populateUsers(Constants.listOfAccounts);
				Constants.svc
						.populatePatientsProfiles(Constants.listOfPatients);
				Constants.svc.populateDoctorsProfiles(Constants.listOfDoctors);
			} catch (final RetrofitError e) {
				Constants.reportIssue(LoginScreenActivity.this, e.getMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// we can call this async task to add the registration id of the
			// device to the created account
			new addRegId2Account().execute();
		}

		@Override
		protected void onPreExecute() {
			Constants.fillListWithUsers();
		}
	}

}
