package org.coursera.symptommanager.doctorUI;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.coursera.symptommanager.Constants;
import org.coursera.symptommanager.R;
import org.coursera.symptommanager.objects.DoctorDetail;
import org.coursera.symptommanager.patientUI.MainPatient;

import retrofit.RetrofitError;
import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.Toast;

public class EditProfile extends Activity {

	// the long that will hold the doctor id which is send with the intent
	long doctorID;
	// the parameter id
	String ID = "id";
	// the doctor profile object
	DoctorDetail profile;

	// declare the views
	EditText name;
	EditText surname;
	EditText email;
	EditText phone;
	ProgressBar loading;
	RelativeLayout layout;
	// the string with the error from the retrofit exception
	String ERROR = "";
	// for e mail validation
	Pattern patternObj;
	Matcher matcherObj;
	String regExpn = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// if the delivered intent has the extra id get it and save it as
		// doctorID
		if (getIntent().hasExtra(ID)) {
			doctorID = getIntent().getLongExtra(ID, -1);

		}
		setContentView(R.layout.edit_profile_doctor);
		// set the name on the action bar
		getActionBar().setTitle(getString(R.string.edit_profile));
		// instantiate the views
		layout = (RelativeLayout) findViewById(R.id.layout);
		name = (EditText) findViewById(R.id.name);
		surname = (EditText) findViewById(R.id.surname);
		email = (EditText) findViewById(R.id.email);
		phone = (EditText) findViewById(R.id.phone);
		loading = (ProgressBar) findViewById(R.id.progressBar1);
		loading.setVisibility(View.GONE);

		getDoctorProfile();

	}

	private void getDoctorProfile() {
		new getProfile().execute();
	}

	public class getProfile extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				profile = Constants.svc.getProfileDoctor(Constants.account
						.getUsername());
			} catch (final RetrofitError e) {
				Constants.reportIssue(EditProfile.this, e.getMessage());
				ERROR = e.getMessage();
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			loading.setVisibility(View.GONE);
			layout.setClickable(true);
			if (ERROR.equalsIgnoreCase("")) {
				name.setText(profile.getName());
				surname.setText(profile.getSurname());
				email.setText(profile.getEmail());
				phone.setText(profile.getPhone());
			} else {
				ERROR = "";
			}

		}

		@Override
		protected void onPreExecute() {
			loading.setVisibility(View.VISIBLE);
			layout.setClickable(false);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		android.view.MenuInflater inflater = getMenuInflater();

		inflater.inflate(R.menu.edit_profile, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// get the id of the clicked item
		int itemId = item.getItemId();
		// get the id of the send button
		int send = R.id.send;
		if (itemId == send) {
			// check if the fields are correct
			if (checkForEmptyFields()) {
				checkFields();
			} else {

			}

			return true;
		}

		return super.onOptionsItemSelected(item);
	}

	public class updateProfile extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				profile = Constants.svc.updateProfileDoctor(new DoctorDetail(
						profile.getUsername(), name.getText().toString(),
						surname.getText().toString(), email.getText()
								.toString(), phone.getText().toString(),
						profile.getRegId(), profile.getId()));
			} catch (final RetrofitError e) {
				Constants.reportIssue(EditProfile.this, e.getMessage());
				ERROR = e.getMessage();
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			loading.setVisibility(View.GONE);
			layout.setClickable(true);
			if (!ERROR.equalsIgnoreCase("")) {
				ERROR = "";

			} else {
				Toast.makeText(EditProfile.this, R.string.ok_update_profile,
						Toast.LENGTH_LONG).show();
				finish();
			}
		}

		@Override
		protected void onPreExecute() {
			loading.setVisibility(View.VISIBLE);
			layout.setClickable(false);
		}
	}

	private boolean checkForEmptyFields() {
		if (email.getText().toString().equalsIgnoreCase("")
				|| phone.getText().toString().equalsIgnoreCase("")) {
			Toast.makeText(EditProfile.this, R.string.please_add_contact,
					Toast.LENGTH_LONG).show();
			return false;
		} else {
			return true;
		}
	}

	private void checkFields() {

		if (isValidEmail(email.getText().toString()) && correctPhone()){
			// fetch all the patients that doesn't have an assigned doctor
			new updateProfile().execute();
		} else {
			Toast.makeText(EditProfile.this, R.string.email_or_phone_error,
					Toast.LENGTH_LONG).show();
		}
	}

	private Boolean isValidEmail(String inputEmail) {
		patternObj = Pattern.compile(regExpn);

		matcherObj = patternObj.matcher(inputEmail);
		if (matcherObj.matches()) {
			return true;
		} else {
			return false;
		}
	}

	private boolean correctPhone() {

		String phoneNumber = phone.getText().toString();
		if (phoneNumber.startsWith("+")
				|| phoneNumber.substring(0, 2).equalsIgnoreCase("00")) {
			return true;
		} else {
			return false;
		}
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		// check if screen is on if it is then show welcome message
		if (Constants.USERNAME.equalsIgnoreCase("")) {

		} else {
			if (Constants.SCREEN_ON) {
				Constants.showWelcomeMsg(EditProfile.this, layout);
			}

		}
	}
}
